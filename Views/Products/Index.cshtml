@{
    ViewBag.Title = "Products' List";
}
@section scripts {
    <script type="text/javascript">

        function isValid() {
            let errors = ko.validation.group(self);
                if (errors().length > 0) {
                    errors.showAllMessages();
                    return false;
                }

            return true;
        }

        function ProductViewModel() {

            //Make the self as 'this' reference
            var self = this;
            //Declare observable which will be bind with UI 
            self.Id = ko.observable(0);
            self.Name = ko.observable("").extend({ required: true});
            self.Price = ko.observable("").extend({ required: true});
            self.Category = ko.observable("").extend({ required: true});

            var Product = {
                id: self.Id,
                name: self.Name,
                category: self.Category,
                price: self.Price
            };

            self.Product = ko.observable();
            self.Products = ko.observableArray(); // Contains the list of products

            axios.get("Products/GetAllProducts")
                .then(({ data}) => {
                    let products = toObservableList(data);
                    self.Products(products);
                })
                .catch( (err) => alert(err));

            // Calculate Total of Price After Initialization
            self.Total = ko.computed(function () {
                let sum = 0;
                let arr = self.Products();
                for (let i = 0; i < arr.length; i++) {
                    sum += arr[i].price();
                }
                return sum;
            });

            //Add New Item
            self.create = function () {
                
                if(!isValid()) {
                    return;
                }

                axios.post('Products/AddProduct', ko.toJSON(Product), {
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(({data}) => {
                        let product = toObservableObject(data);
                        self.Products.push(product);
                        self.reset();
                        alert("Record Created Successfully");
                    })
                    .catch( (err) => alert(err));    
            }

            // Delete product details
            self.delete = function (Product) {
                if (confirm('Are you sure to Delete "' + Product.name() + '" product ??')) {
                    let id = Product.id();

                    axios.delete(`Products/DeleteProduct/${id}`)
                        .then( ({data}) => self.Products.remove(Product))
                        .catch( (err) => alert(err));
                }
            }

            // Edit product details
            self.edit = function (Product) {
                self.Product(Product);
            }

            // Update product details
            self.update = function () {
                if(!isValid()) {
                    return;
                }

                let Product = self.Product();

                axios.put(`Products/EditProduct/${Product.id()}`, ko.toJSON(Product), {
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(({data}) => {
                        self.Product(null);
                        alert("Record Updated Successfully");
                    })
                    .catch( (err) => alert(err));
            }

            // Reset product details
            self.reset = function () {
                self.Name("");
                self.Price("");
                self.Category("");
                
                self.Name.clearError();
                self.Price.clearError();
                self.Category.clearError();
            }

            // Cancel product details
            self.cancel = function () {
                self.Product(null);
            }
        }
        let viewModel = new ProductViewModel();
        ko.applyBindings(viewModel);

    </script>
}

<div id="body">

    <h2>Knockout CRUD Operations with MVC</h2>

    <h3>List of Products</h3>

    <table id="products1" data-bind="visible: Products().length > 0" class="table table-stripped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Category</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody data-bind="foreach: Products">
            <tr>
                <td data-bind="text: id()"></td>
                <td data-bind="text: name()"></td>
                <td data-bind="text: category()"></td>
                <td data-bind="text: price()"></td>

                <td>
                    <button data-bind="click: $root.edit" class="btn btn-primary">Edit</button>
                    <button data-bind="click: $root.delete" class="btn btn-danger">Delete</button>
                </td>
            </tr>
        </tbody>
        <tfoot>
            <tr>
                <td></td>
                <td></td>
                <td>Total :</td>
                <td data-bind="text: $root.Total()"></td>
                <td></td>
            </tr>
        </tfoot>
    </table>
    <br />
    <div style="border-top: solid 2px #282828; width: 430px; height: 10px"> </div>

    <div data-bind="if: Product">
        <div>
            <h2>Update Product</h2>
        </div>
        <div>
            <label for="productId" data-bind="visible: false">ID</label>
            <label data-bind="text: Product().id, visible: false"></label>
        </div>
        <div class="row mb-3">
            <label for="inputName" class="col-sm-2 col-form-label">Name</label>
            <div class="col-sm-10">
                <input class="form-control" data-bind="value: Product().name" type="text" title="Name">
            </div>
        </div>
        <div class="row mb-3">
            <label for="inputName" class="col-sm-2 col-form-label">Category</label>
            <div class="col-sm-10">
                <input class="form-control" data-bind="value: Product().category" type="text" title="Category">
            </div>
        </div>
        <div class="row mb-3">
            <label for="Price" class="col-sm-2 col-form-label">Price</label>
            <div class="col-sm-10">
                <input class="form-control" data-bind="value: Product().price" type="text" title="Price">
            </div>
        </div>
        <br />
        <div>
            <button data-bind="click: $root.update" class="btn btn-primary">Update</button>
            <button data-bind="click: $root.cancel" class="btn btn-primary">Cancel</button>
        </div>
    </div>

    <div data-bind="ifnot: Product()">
        <div>
            <h2>Add New Product</h2>
        </div>
        <div class="row mb-3">
            <label for="inputName" class="col-sm-2 col-form-label">Name</label>
            <div class="col-sm-10">
                <input class="form-control" data-bind="value: Name" type="text" title="Name">
            </div>
        </div>
        <div class="row mb-3">
            <label for="inputName" class="col-sm-2 col-form-label">Category</label>
            <div class="col-sm-10">
                <input class="form-control" data-bind="value: Category" type="text" title="Category">
            </div>
        </div>
        <div class="row mb-3">
            <label for="Price" class="col-sm-2 col-form-label">Price</label>
            <div class="col-sm-10">
                <input class="form-control" data-bind="value: Price" type="text" title="Price">
            </div>
        </div>
        <br />
        <div>
            <button data-bind="click: $root.create" class="btn btn-primary">Save</button>
            <button data-bind="click: $root.reset" class="btn btn-primary">Reset</button>
        </div>
    </div>
</div>
